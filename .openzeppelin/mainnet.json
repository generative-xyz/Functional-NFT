{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x0D168a83F49760E3945953a202416908Aa00c2D2",
    "txHash": "0xc56c69c82eb9c7359b66839c79257072e439de3873f2449db49e9d0739be302d"
  },
  "proxies": [
    {
      "address": "0x9B80971f499FDEaeec70f9b12bF31588485ED259",
      "txHash": "0x358f5c82c1692e23a3621516be8bf6d72d302b7028bf97c9374a6c3ef8b9cd51",
      "kind": "transparent"
    },
    {
      "address": "0x2bfFC4B014a68b300f84B143965618c7E52de964",
      "txHash": "0xf34f6027f4f2ee38e79684f9e53eb586354b37799cc465fee656e6d95bfbcd4f",
      "kind": "transparent"
    },
    {
      "address": "0x8Fd1EF5a56b0C51bBc1d08B3D99E68E517658B24",
      "txHash": "0xea5dcdc25c480de4eeeb4ee2d7c7661fb9945021bb14189d8d58abb1186bd177",
      "kind": "transparent"
    }
  ],
  "impls": {
    "6ab78381927b359f64e5170dc14b020d8d4427e581c09b8e3d469940b453596d": {
      "address": "0x9e5D26548671A64E5c4F03740847c0571C966d34",
      "txHash": "0x4c7b93cfc04f57ee6d16cedb53b6a72d44ea4d2955563ec05db2b9d197538a83",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6153_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:379"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4618_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)6153_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4618_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)4625_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4618_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)4876_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)4625_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)6153_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "dc83e693960d9bcceaddf6011f68189b13b8402bde098117cfacee24cf80b56f": {
      "address": "0x7cD16E145A5f92AAa5f9cA6080e602465c203cb8",
      "txHash": "0x23ee49369c356d3d3f9a74ff4123447940e485db9adc8a1bd39d3322e75d6063",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6046_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:421"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4612_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)6046_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4612_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)4619_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4612_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)4876_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)4619_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)6046_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d824ac955bf63c92aeb32f55e9e39f4f8a38f5e8981e903d3166628e347b110b": {
      "address": "0xEFBdCBfE7faBcA49B1724c8b16A54a13e750e715",
      "txHash": "0xac319bb306372fdc08dc13ebc169ad5e9d590d278ab111e707bb2c11f08d1ffc",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8614_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9734_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:421"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8332_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8614_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9734_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8332_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8339_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8332_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8614_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8339_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9734_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "40d9f565d8d0ce4dfe0a6c9a8b5cb06101268ac8b82f9e83a4149745bc7e5651": {
      "address": "0xD3B7f6F6ac0B96c72FB6f063C21955A27056c075",
      "txHash": "0x9a4d7fca5f0ac2c6960d3c5f7f9725e3e933b36462f7b93863d9f2f6dc3f3d5b",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:32"
          },
          {
            "label": "_nextTokenId",
            "offset": 0,
            "slot": "554",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:33"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)4877_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:45"
          },
          {
            "label": "_paramsValues",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_struct(ParamsOfNFT)4618_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:48"
          },
          {
            "label": "_traits",
            "offset": 0,
            "slot": "557",
            "type": "t_struct(Traits)4813_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:50"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:52"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:54"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6056_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4605_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Trait)4808_storage)dyn_storage": {
            "label": "struct TraitInfo.Trait[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ParamsOfNFT)4618_storage)": {
            "label": "mapping(uint256 => struct BoilerplateParam.ParamsOfNFT)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)4877_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFTCandy.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)6056_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFTCandy.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4605_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfNFT)4618_storage": {
            "label": "struct BoilerplateParam.ParamsOfNFT",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_value",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ParamsOfProject)4612_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4605_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)4877_storage": {
            "label": "struct GenerativeBoilerplateNFTCandy.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)4612_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "7"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)6056_storage": {
            "label": "struct GenerativeBoilerplateNFTCandy.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Trait)4808_storage": {
            "label": "struct TraitInfo.Trait",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_valueStr",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Traits)4813_storage": {
            "label": "struct TraitInfo.Traits",
            "members": [
              {
                "label": "_traits",
                "type": "t_array(t_struct(Trait)4808_storage)dyn_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d243af09be890e61f77f437c8954497f0937d9c40f475bbbc9294054f310e93c": {
      "address": "0x3ec4a302c0A79c1Ce9DB41647bA6605F7641C3e6",
      "txHash": "0x78db9e9facbec34f11d21f3bc327c8494bbf0d8b330ad8c4ef68e8786d26ebc5",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:29"
          },
          {
            "label": "_nextTokenId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)4868_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:42"
          },
          {
            "label": "_paramsValues",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:45"
          },
          {
            "label": "_traits",
            "offset": 0,
            "slot": "556",
            "type": "t_struct(Traits)4813_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:47"
          },
          {
            "label": "pBaseTokenURI",
            "offset": 0,
            "slot": "557",
            "type": "t_string_storage",
            "contract": "GenerativeBoilerplateNFTCandy",
            "src": "contracts/nft/GenerativeBoilerplateNFTCandy.sol:49"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4605_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Trait)4808_storage)dyn_storage": {
            "label": "struct TraitInfo.Trait[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(uint256 => uint256[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)4868_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFTCandy.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4605_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)4612_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4605_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)4868_storage": {
            "label": "struct GenerativeBoilerplateNFTCandy.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)4612_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Trait)4808_storage": {
            "label": "struct TraitInfo.Trait",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_valueStr",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Traits)4813_storage": {
            "label": "struct TraitInfo.Traits",
            "members": [
              {
                "label": "_traits",
                "type": "t_array(t_struct(Trait)4808_storage)dyn_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
