{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xB044122f1CD9080A60Da25b1A8d59162290D7275",
    "txHash": "0xa7c0bd285bf9ad1cc92d749b8a12ba12d6aa95b3f6d8c3113a00fb5c96c8a37f"
  },
  "proxies": [
    {
      "address": "0x56E821D760D00C58590100040b09Ac3D1CA2a142",
      "txHash": "0xc4b7ee8661e027b1f53d03e77373659133dd19547940aacae565d2352c9edcdf",
      "kind": "transparent"
    },
    {
      "address": "0x19CbE1721a63Dd4F391Fc6F0A75596fe98C2301a",
      "txHash": "0xfb8574fc658e1f619d54c6d2e103fba04a9c9ae50c64e763101fd4c99884c691",
      "kind": "transparent"
    },
    {
      "address": "0x54532D116f126690913da39dEa2DFD608a6f2D92",
      "txHash": "0x92cd3e919f2fa5bf30db53422441b3f2854c668b30e0b3dbf644dd760f2911d9",
      "kind": "transparent"
    },
    {
      "address": "0x5BA89993ce68370578518eFBDcA9412eEc86CEb2",
      "txHash": "0x360657325d21613be5f363a78b242426887a2c42f76e39c011f805eaa674fed6",
      "kind": "transparent"
    },
    {
      "address": "0xD72bb082698FcA9778b2887a9Da41c458F4B544b",
      "txHash": "0xf070c24033a734e9ed7c8cbe91952d9f5bdc2138a98130ec0f3577915dfb2d54",
      "kind": "transparent"
    },
    {
      "address": "0xE7e2736b8450e2D7937780232570dedceeF2229a",
      "txHash": "0x9b21fa58d03ad64822b5c2a340681a103539f1d17b732d008afac8022d4c3f0e",
      "kind": "transparent"
    },
    {
      "address": "0x081bB2bD266D95A1787da8916BcAF1235EDC2080",
      "txHash": "0xfb90896267469fee71305349013bf18e6e2a45687d57025fd22242dbd1c3d16b",
      "kind": "transparent"
    },
    {
      "address": "0x486a29a8f73984839F5C3D478CF9B397f8587cF6",
      "txHash": "0x7c5c518df36995caa5c8e4d709a9a56a9e076093613387409c379af64e08ec64",
      "kind": "transparent"
    },
    {
      "address": "0x58603fce93009536D4267bAd9A55f5fdB54aCD24",
      "txHash": "0xc9423f2733138c3bbce614f2979b8374c83b60d2fd07f5f75aa22c05d4abec78",
      "kind": "transparent"
    },
    {
      "address": "0xc5eB14e6FB3068717E025065920a4782b5C0a227",
      "txHash": "0x2673e0436a4476994a9b4704dd537bcbb14188cd0af350c903c4a9f493876faf",
      "kind": "transparent"
    },
    {
      "address": "0xae0C96BBD7733a1C7843af27e0683c74E182A3a7",
      "txHash": "0xcc25f9a055c78d6f5a25fe9d08f1bfc11b169e155f44433fbf3c66b6c0737199",
      "kind": "transparent"
    },
    {
      "address": "0x95056d48b6DC390304e6d5c4638A413E7Bd931ce",
      "txHash": "0x98812281aadbb3833d06611ad9b35fb68b3a6ac433111acfbaacaaceda66238e",
      "kind": "transparent"
    },
    {
      "address": "0xb1F4fb76648D77D4c3F69253e1fAE812178747b2",
      "txHash": "0xbfcc1d1467af7d7479062d97ae9c903109fdae5212b1213f84c84b956452b257",
      "kind": "transparent"
    }
  ],
  "impls": {
    "62c02f34ce744b6d573a519863fb062db940e581cb488a7ec6500104650155ef": {
      "address": "0x8197c34e664C2b8c9DAB9b2D5509A45571c00ce8",
      "txHash": "0x711a1c233248ae0bf31ba86c5211e5b20868ca0a1943d025ac39c1abaade21bf",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:36"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:39"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:41"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:43"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:45"
          },
          {
            "label": "scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:49"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:55"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10060_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:310"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10060_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10060_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c22ffe8ecd6e2b0b202b0585b1a5fc8b08e1b895991c434d6ac3ae0e3af2ba47": {
      "address": "0xdD7aD504f81B00C53c2F2c37c9b8185EA8c4D8A0",
      "txHash": "0xf3e2c51db4bc0e6f64f71b659064b12b185ef93017dcd610721b2a2b2ea91ecf",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10083_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:318"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10083_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10083_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "fc32e9d7425f556765c51f7c1b56820b7edb9b4a5efd0fc76b0acb21e8dd0d70": {
      "address": "0xD5AaBDb14027131C16Bd16B9E2d08628D7ee2aA0",
      "txHash": "0x4a3f6a0034844b2f71a9f4014cb3c902e46fd1eb2e91ea720c6a885624033f84",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10088_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:319"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10088_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10088_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "8fd87363bd3b395de3282ee73aff3392f846ab4f0e63d408dd047b4967aece5b": {
      "address": "0x12A7AB582EB5b7682a19D41dB86695e13eDFb87c",
      "txHash": "0xdc9f709dd06d371e125cceb8ba35c7285e612a657ecb4fb9462d4936323fe08b",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10094_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:319"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10094_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10094_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "bb1bc356d433e0309ed86fd4b19f99c1bdce108015407603e88b75904094e42d": {
      "address": "0xcf76330eB24087041B480807a7ba78E2A1Ef385B",
      "txHash": "0x61613490607057e08e240fc67f3ae58c981a1e898d622835c037d546a900734b",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10107_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ab85dcbdf3256c655f16caf5234eadfb5ca915cdba280574208c52ef31ded61d": {
      "address": "0x5C20113a5B8FEB23d6C3cdB7e45d28eA114E085E",
      "txHash": "0x5de60033afdaeae47c59889c5208152ec21648bca09d0a7554b2c0a7ac879d0e",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:321"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10107_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "183419b5c1e328523ab55033d3e798659cab47bb820b0e070a9f0c8436ce83b8": {
      "address": "0x1C8452A0f62987Cca6b8c3DeB0a92543C6a3EdD0",
      "txHash": "0xaf90f8f3bfd1fc3f202ffb74b0d6ffe7b338b87d72170bf38cda99279f544d79",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10107_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10107_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2d50fef37353ef28c1e7ca93e2d80049fef3e4fdd2a12f4cbf68b0db53acfac5": {
      "address": "0x0E5C8418Ee91E5d03593E1DF481aBed9DD54e788",
      "txHash": "0x26d49b7fda3b82977887c3ef428c864a2ce011a2a9f71366da49977a90bb3611",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10100_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:321"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10100_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10100_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "8b105fdd1171df97b22828f051837eb1060f65b125c30b0b17056a3b8ef9e39f": {
      "address": "0x1a97249412e939B59f81cEc116EC4F154Eb3D69D",
      "txHash": "0x51fb89f984593f4f21cf3579218dc8d0b286650092b4d10c27e9381bf81d4ee4",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10111_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10111_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10111_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7e7a1e7cbe01a67e7f6b080139a57ce7c3ee94b2ee91e4d472155453234b0f96": {
      "address": "0xa745274D13626DDE30C105EF81958f581dCB867F",
      "txHash": "0xf5a4ec27619cc50002cb61c95bb72ccab4d306efbbf9047914beab457d476f93",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10111_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10111_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10111_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "94b89079c9e9954a9341b4d130071f209671ec53ee52e3906b9d7ed3e82fb110": {
      "address": "0x4A125b0766808EB043E26A077Ae0506b85253eAb",
      "txHash": "0x1538b5774b0b4c1b4ac259cd496e960a4f663dc041b714cdbb51611fe8d86f6e",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10104_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:321"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10104_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10104_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c96263fb12cf32fda57c9ce466640ce821f5d90f2bfd001241ed6c070f65ef08": {
      "address": "0x5DC8481DC34E145520C76ee20F5a36a1e8c7D6a3",
      "txHash": "0xf125ebbf89187124063da3451cc6aca408298aa8c4d5ded0e6a053ef708cd79b",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10110_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10110_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10110_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c6cf0087ec74f588a1660478cc5d9060aaf5fdedf98580c4a1e84a8aab1ea3a9": {
      "address": "0xB9d1e2FB7cb0cB736519F50F64c82aC4B27B82C2",
      "txHash": "0xb8c3ce876f2118c2e5c8a6426a41e968db70d7331837c32633da4877e4a5985b",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10133_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10133_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10133_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "82929dd70ba80e7496cc12f5c4b809dc40b6d7c5eccb3819affad9972c1caeac": {
      "address": "0x4C33191c123b56074AA1f5dfB689E56b2Be08a3a",
      "txHash": "0x92ca226b2f386e0e2a4e6b78281a095a7954c0f42ddb90c2b7130a9c0d1f731a",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10125_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:321"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10125_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10125_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "59c53fa2cfd2fc90185435a5453669ec0d53cb1ce445a090e4d9fd198cbf672e": {
      "address": "0xfb9dF7C4b3f1e6a7D997cad5044eaB754A950247",
      "txHash": "0x940b805cfdc273742fd35ee877e37e24bc6b0735c59cedebb847b3adb27d038f",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10122_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10122_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10122_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d6376c340246ca1feb3a9b9b9aedbe90e588a07a29a8d5a1729fb5b9e50e5041": {
      "address": "0xd34Fd21D97495a0cb2b8656487585e2Ca7bbc35F",
      "txHash": "0xa1f59ea82f7f9bc62a54a2af8b3360bb9ef1de6775bc6c884c7ffbdd5f78ece3",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10138_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10138_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10138_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e98e6aec45742462ff203cb0170333090a7649eb937441f028bff5089f43e510": {
      "address": "0x250647B418d281Ed6FEe35346E12747fb666228d",
      "txHash": "0x94dd3d8ece9c58a3b51a659fdeae391a5b866e968c451866aa6ad408bb39ba29",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10138_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10138_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10138_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b156086f7b0906c132a424f2dd0897a26da66afb9f068d7bb7d8168c1b365ddd": {
      "address": "0xcbA2bad9d2453dfE7F8BEa76fE38981199393Ff8",
      "txHash": "0xa6a8ceb967245ce0db4f78c9a656b804d7d4ce96430cdb353c048bbf3acb7c95",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10129_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a8ac34fc666c0e820240470816a4d4631447fc20c13470d24c7b49f187595a8a": {
      "address": "0x84D5158684489B34BE2Da69f8fbBcc7cb6cffA79",
      "txHash": "0x8834fdcdfa2606c05c3478a44c42253f2a07a9d158a854259013de46c5d962a5",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10129_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e9ba91011f60b36d7f17720bf70366226ff92fb82458b186a968d08b75f46ccb": {
      "address": "0x9B2096DdECA6a64C40b312681A1042546BF85a06",
      "txHash": "0x352e7809953772450b961510fe9ea6fafbde137e9d10a869ebdf907466bdbafb",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10129_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "20a240709b4a267c08b041bd396f0504a53a173d82b74d5f9be01beb60ebab99": {
      "address": "0x541E3231A7A5a57ACd07D1A24dc3372ab855CCc8",
      "txHash": "0x817d69507b98d4a0fd9b989623ec2693f9612731240655dd93d3679b61d63ff5",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10129_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10129_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "851214bbd2dec9435ca88aba0bc7953afe7dd545ee13119f04ca52571ef3ea0f": {
      "address": "0x396615D4bE7cBc0D73785c4bD5B44EEF5FEb57cb",
      "txHash": "0xb9e71bfb427d5690d2a3595365782bf2d142bbaf3357944b7d3eeb1750bccf09",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10131_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10131_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10131_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4cbf9a72c19464e17cc18ab2523faa6766faa7ef2fa1f86359ef2a6ddb7d2762": {
      "address": "0x339e6B328C699947CD41f97d7e00f76686593DE6",
      "txHash": "0x461d7d5b807b2f00c08444215d19c98a64ee9a09c7da95486d64ae4fa1521798",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10124_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "63ad7b2cad635853ca8fcf6ae6ebd9e4ca1ca2c59337045831c4f3b868af879c": {
      "address": "0x5cD90eAdB69b66C2564f0e7D471CF05297401767",
      "txHash": "0xcd9125d6c5d1a99f3fbf5439aa4eda13d421c195d5e295a5e0f03c449adca8a0",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10124_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d2fd16d56f6e58125b2646dffe009accd23203c4f7c1e9aed74cd1ab4c819782": {
      "address": "0xCF4Dc1AF1E3a8fcd29627468d8F7b3d423cDc082",
      "txHash": "0x29e013dac23a7159960181d3845333e71d9db5765b7d762ae75791b1be1e11b9",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:323"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10124_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10124_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "47f86a78c80e98ec8d22c45f6151178d5bd6be373ea50a81cc77a27eff272bc5": {
      "address": "0x39da3992164B0091cbf0197b254901934DbD2c0a",
      "txHash": "0x05056f58e66b38af56c96d74339331793a00a108b166a35c3c903f9580c989b9",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10117_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10117_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10117_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ac51efb29027144a9a8473d37a5c19c89d393474cdc1e0cc2624a97e292f64ce": {
      "address": "0x158C0Ca719cd3a5e263f45e104C9B5f567039Df3",
      "txHash": "0x0089f484e5bf31772003d142b2dba765f353e7c9a146634f534a7fdd1d184a51",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10634_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10634_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10634_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4c6220b49f2b299074986aa67ede79d93955c58617a565ccdb934e1a6b22ee59": {
      "address": "0x3b4959b2313Cb9F7eCc78192De6e02aD04fD89CA",
      "txHash": "0x8eee8495b0aa0d37302d13791791fff0295a40b944e345c9f8bac73290f4e4b2",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10117_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10117_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10117_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6588922c318e4ccab9bbf449b9a07b4993134b7037c97e12a4de42801e9a74a7": {
      "address": "0xdA722512Ea1488FeAe8C07161B985068080394D3",
      "txHash": "0x8210c46c2ac8646f4c4d0829b62c3c5dfad3a9374deb6c07f90557c2959ea78c",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10115_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:322"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10115_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10115_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "8a8357a93153f97e72a7e7a001a1f09f72bca721fdeef0159f5107bf3f10d2e2": {
      "address": "0x2BE68E22010e97A11A97A6F8fD47159Cc972D44A",
      "txHash": "0xcb49de7c23aea4ff50a84df963a973477a19c00a8764ff30c99dc80d24bb83be",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_fees",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:37"
          },
          {
            "label": "_feeTokens",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:38"
          },
          {
            "label": "_mintMaxSupply",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:40"
          },
          {
            "label": "_mintTotalSupply",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:42"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:44"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_scripts",
            "offset": 0,
            "slot": "560",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_scriptsTypes",
            "offset": 0,
            "slot": "561",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_paramsTemplates",
            "offset": 0,
            "slot": "562",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "563",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_projectName",
            "offset": 0,
            "slot": "564",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "565",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "566",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10320_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:361"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10320_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10320_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2ce726323e233d6e2289767463fe01fb85aa26e85af548da736a64bc38e2306d": {
      "address": "0x2A9de18daFA76659b2c5C69Bd1Fa52841b260c9f",
      "txHash": "0x98ffb0961e2b52be16e7cc253ade18129305b7a3347d842e87a77446fa746190",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:29"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:32"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(project)9050_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:52"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10371_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:362"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10371_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(project)9050_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.project)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10371_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(project)9050_storage": {
            "label": "struct GenerativeBoilerplateNFT.project",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "068efd73864715c9b230ff0dde20452c19ef324bdc4109bb4fa841cf85c09cf7": {
      "address": "0x295E6DcBcE443283decEAe7A1722B1e13D9d3657",
      "txHash": "0x01cbcb13865530da7b94c24506f74402fe15a9b65c41090463e10ee85109bab0",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:23"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(project)9100_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:43"
          },
          {
            "label": "_nftContractProject",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_nftContracts",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10454_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:358"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10454_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(project)9100_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.project)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10454_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(project)9100_storage": {
            "label": "struct GenerativeBoilerplateNFT.project",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "320"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "cdd2c43cd57514719ff48e32086d8549cf42c89ea9c585c174c3351ca2f37174": {
      "address": "0x29Ef8463378511C9DfBb0ae55C70B6DCfE72F301",
      "txHash": "0x5411f1952faf4f4780f6d26b429333902415a44c59376aacf64b37ff994c9fc7",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9242_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10386_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:343"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(param)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.param[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9242_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10386_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ProjectInfo)9242_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(projectParams)9024_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10386_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(param)9015_storage": {
            "label": "struct BoilerplateParam.param",
            "members": [
              {
                "label": "typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(projectParams)9024_storage": {
            "label": "struct BoilerplateParam.projectParams",
            "members": [
              {
                "label": "seedIndex",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "Params",
                "type": "t_array(t_struct(param)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "04709287dade778443463b23b08cba28ca442cb545d048eeef95cec282d49d35": {
      "address": "0x2618E622A5D66FD8C03A42006e822836A062228b",
      "txHash": "0x57fea29fcde714dc07bd3c3a4511deff92e30e47b166e126314285ad82b63764",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9240_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10393_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:345"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9240_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10393_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9240_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10393_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "79b357b5c7ac0c3fcb38ca2a36f125df326b07d6c3951622b2c76441461fb5d9": {
      "address": "0x741BcE6205Ad58F35f4005D3C922A3D047c71Db6",
      "txHash": "0x8168b00f1f5681ed2f752e250a04ec6a6c536e1cd5e4bca6c2ea7e251771a618",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9240_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10393_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:345"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9240_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10393_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9240_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10393_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e59d563d2319fa0a17b7d31a5498a5bd0dfad2f0b5385e5e22021d30dd976ef7": {
      "address": "0xa434b6a535e4cf9E4F6C77dF4eec06ED666ab8F9",
      "txHash": "0x1a2a2b4d4147d80941e3a50b852bb901375797bb114e8ea9c895f26735227f32",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10409_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:346"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10409_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10409_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "1654d07435573b5b05e3ca1e86d1f2b473eccf21ec58f27938248dd5f9b84f0d": {
      "address": "0x12960Afee3F653587B7360379ba17b02E9DEa88F",
      "txHash": "0xdb0d03b39aef294be5baca95338c3c2199e2c62592978cb80c5b2075a8ac779c",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10416_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4385733f96d57716d184299493a9926b2b805b1687954b726a9c11ac3f722626": {
      "address": "0x5a4153b451511BD90D9759b81EfF9CE65dDD6F4B",
      "txHash": "0x97ecc32bb75079e58eff0b4da667fc2cdadd3a3cc6142aef33cd2f204c620da2",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10416_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9fdf8b65d63e8236c96674daf927fbf592adc8558c57fe6a74c4edfb6d1c4c47": {
      "address": "0x4386e030d3f5eC575452881568354608f992298e",
      "txHash": "0xbc8af7e4b8c50664fd0c5e5d05532b7c8c69d54eaa45c4df9218e1dfe08c82d1",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10416_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10416_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7f958c7e6195b0378e8f22cb5769558ce7bba27cb1360bf412f8ab8a9015d70c": {
      "address": "0xF8eCc7fACbA5dBa2E2dDAAc8F59B611B4D4B0955",
      "txHash": "0xe3ff0c377cb283c8d5b3f57600f461d4d4ebbe9e71aaf7856e489a05889e2346",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10419_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4fcba70fbd5790cf7f7a132fd3a9a9b23daa682bb670e16e1d4b60fb21be369d": {
      "address": "0xA48d0dFb2ca6f5c670d845C6A116D417C27acE1F",
      "txHash": "0x81c637a582676b2929ff977e86b84823229c6c5601dc21b6548ebec09bc7cb87",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10419_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "76e4c0d3fa2c22893fb73947022b050004b27a2d600930459545210261bad016": {
      "address": "0xf0C1A6150E17ed2c2DCc683f09921e0bBEF6A70e",
      "txHash": "0x4f8d5b54253112ca6c57fea8422acf78206bd454f7222a7439ca11bf14f31ee3",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10419_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10419_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c313204f991dea9b1bf5aec77ef86ba49d6e14b213ac7c6c7243cb0cc7c5f479": {
      "address": "0xbC5D02d202124EaaD3da342A977F44f93155c1b4",
      "txHash": "0xe5dda3a6902857516b1a7e9a5860dcb45b6acf039451934fe43462bed4529a81",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10430_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:349"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10430_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10430_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0bfb3107e9351b819f24b43336b066a9bc5adf0c309e5d5f2eeb442369c30cc5": {
      "address": "0x12715ec144754DdB9E33dcFB417b03588e08b22B",
      "txHash": "0x5a575c2c424303796576b7360f39c29a346d3480b3c71283444ab444be868800",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10425_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10425_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10425_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "49c8902555e5a0dbb22e3a3fe65e11ba9de5a996f1de2c7a146b2a08dc161ae5": {
      "address": "0xeDd45C6E552b18c3888f3f888A16b0aA05c75255",
      "txHash": "0xcd7146e768cc3d1c9c9938ab3f19e5bc62df62ef4d70dd1d3b6e6b680f6322d6",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10430_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9237_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10430_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9237_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10430_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9f6a6ceb1d0daab4fd875cf7838b152de1c3c9af5e165d9863d00e8974f48fa5": {
      "address": "0x06d41a136311cC7742BEa1805d6724F4007FdD20",
      "txHash": "0xf819993e3564521e5888af0b87eb28a288cad7f3319ba37a0120b2880cd4a756",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10434_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10434_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9243_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10434_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "32a72d0513723b1e6fb49f86054180cd22812ef1e9222f1b79f5ccce8bca14d4": {
      "address": "0x8854B3c47Aa810FC6176390056CC911D739cF86C",
      "txHash": "0x43a4009c50896d7d80d10239e254a3673c24efe010296f6fa81ec74f63306fcb",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:347"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9243_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10441_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "1960751563e05610655059376632d5b23ecfa31f18c297ae8135b6ba22b0527d": {
      "address": "0x85770E1797d81A05e4b170dE55C3cC24F657c080",
      "txHash": "0x565c713443c07a8dbc6437a599ee1d4b5beb3a28f849512c2082a2f81725e075",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9243_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10441_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "326bca876c82afd8b1bbdf241b9e02010130304daf1c78a3b9d71b8c1e2ae1bc": {
      "address": "0x5E582f678653ff69Cb58B9e5650d1Abba52B7Ed5",
      "txHash": "0x333412cd3e5a8f682b79c03e795fc59f2d4928ddc146f299fdb647921f6c11dc",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10448_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:349"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10448_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9243_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10448_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "da1586b03c4a112d00a710cd8ece594d515a916843ac2b599048b9355895836d": {
      "address": "0x7c00A1643B72Ea105CC13FD7969e9fe02577fC45",
      "txHash": "0x21d64ecaef4bb1c28c54df1373912e0a0f4da3c9bb8e2e48d51ea9d809d518a4",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3813_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3813_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:348"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4787_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)9243_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)10441_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4787_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4486_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3813_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)9015_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)9022_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)9015_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)9243_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)9022_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)10441_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)4486_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f519b88cf96ce524c4165fc310888e7647ede8a49888eb996bf32fdf39484f64": {
      "address": "0x4d11595Cba5D8ac58EB42B51f5fd3a056f4FEBb8",
      "txHash": "0x72cffbd185f694ef640e35128e4bc9de94de49a85ee034dee77b08cf3751685a",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8707_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9892_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:341"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8485_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8707_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9892_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8485_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)8492_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8485_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8707_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8492_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9892_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e9a73d5f0177af2f0e12dab69934c7439d703ec76288e24ac1721e47a9ad6255": {
      "address": "0x1f6DDadF4F6a9D1f5E23596855256e2d5BDD97f4",
      "txHash": "0x2595a725128dfdb5e55eee2c75a145ea9be1f1e25c261d73c6c21d5988a87b16",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9605_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:342"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9605_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8189_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)8196_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8411_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8196_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9605_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e7d6f4bc4056a8441e1a9e6732812ff14c517056545ef1d812fd43e06433c581": {
      "address": "0x3a498e9599A1977925015d7440162e4320900139",
      "txHash": "0xd74a93344c70b20150edf6f250eeeb7f36d0a3be4916398e9cb6f3dd6301715f",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9613_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:342"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9613_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8189_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)8196_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8411_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8196_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9613_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "f6f60e4413fa9de1e05ecd5b81cf7354e893fcc64cf8b5a30ab2bb246be7bbbe": {
      "address": "0xd21886bCd59745262610882DeB831DfD3f4FB6bF",
      "txHash": "0xcc63ce05da3c5ea4e99582185bca8d183a60ae134324cdc4ae30425c4fd1b652",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:63"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9611_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:341"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8411_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9611_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8189_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)8196_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8189_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8411_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8196_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9611_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6ab7c3975c957ea9347c04d2407b18085fcfac1d8aa2c30bdd1256b7ed8e3fd1": {
      "address": "0x7325e65970dF86592eb74951d26746C32314A1f2",
      "txHash": "0x2fb236e7d783aaa588ff0b26d724f6c55eefedc5fcdb1448fbaa2be3d793d737",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8433_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:58"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9665_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:354"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8220_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8433_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9665_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8220_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint8",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint8",
                "offset": 2,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_availableDecimal",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_availableString",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_value",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ParamsOfProject)8227_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8220_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8433_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8227_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9665_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7f9b76456c8c764568ea2576b9108ca2639621b12c7d1f97542cd06af0361127": {
      "address": "0x28A52c494F3f41DfE8ca824A10AFadcE4307fE02",
      "txHash": "0xed73675ea46a54c538668f33381de25ef5f834c8f86252031aa3446a3b95363f",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8441_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:58"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9668_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:378"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8215_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8441_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9668_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8215_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint16",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "_min",
                "type": "t_uint16",
                "offset": 3,
                "slot": "0"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_value",
                "type": "t_uint16",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ParamsOfProject)8222_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8215_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8441_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8222_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9668_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6f5b9237a4221b2290bbef7278f4097211b46d982fb8e9f459c735841fbdd46b": {
      "address": "0xABB3286ccc10281c268c3b36B9dfCCf54F9d4042",
      "txHash": "0x8fad33462025c33145a05450bc460ace7617bc7141dba6f114d5fe8c68f43140",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:25"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:27"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:30"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8408_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:46"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:49"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:52"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:57"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:60"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9621_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:377"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8408_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9621_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8217_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8224_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8408_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8224_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9621_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "1b30636f4aebf57d58a33b74ef734c3f3936ae2c4b33e666bdae2d44b08e8c78": {
      "address": "0xF6bCC762864e598874200aBEd0f6D435c41c8121",
      "txHash": "0x4180d5a3038dabe9fb7da1b4eca0d085a14f71bcd0708cdb5a8de8d25e04e4bb",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:58"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9680_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:377"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9680_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8217_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8224_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8469_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8224_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9680_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "06b15ad29f24b898938554898aecfbfdb32e00620b0206e6aae3fbc79ea2f9a2": {
      "address": "0xCC88Ed5191496E221E0d5b846F6dbCcde8F15A3f",
      "txHash": "0xe01dfc449abe9c1bf6c0b4244b9bb893d180c52ba17dd03e6ba8fe45716b8254",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:58"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9736_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:389"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9736_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8217_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8224_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8469_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8224_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9736_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d1f00649be35fdffdcb5d37aeed30e67df11cfd0b59c70913e7e6ea68d5a6cf7": {
      "address": "0x0FeF37F2da8c7C1C429239616256B15AFe3f7bcB",
      "txHash": "0x695a74ce4ae4236eab5c354eb95293745f899518dda7e90038811e5749a37976",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:47"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:53"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:58"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9727_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8469_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9727_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8217_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8224_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8217_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8469_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8224_storage",
                "offset": 0,
                "slot": "9"
              }
            ],
            "numberOfBytes": "352"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9727_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "73a0f2820d7e087c1c3c34968906ef0cb11b44ff3076f8913b189a58f3296069": {
      "address": "0xBD4AfCA007324C1E6dCAA7CFbA6E719dA23F5181",
      "txHash": "0xb0efe3292de600cce0626340a22bb1b13faac747aa193ad7ff7c6642a134135c",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_minterNFTInfos",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:51"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "559",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9840_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9840_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9840_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ac3961ba1d060cde1ae1d3514816bf1c0916a4b0ebee3b7183f94d7b6c39ecf3": {
      "address": "0x923Ef719AC5f28fa6C382B421eB72685883ab487",
      "txHash": "0xc5e860e7f714f8d2f87a859e218e567ccbffcd0d63e9a91a1462f304c3410c3d",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9836_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7ad0cfa3e0090efe1fbae2899215726f449b1aa2d26a3fbafe685af55d10c393": {
      "address": "0x21b7c342b011370E5Cf8A9a4FA6a1FA3ff9c4BD3",
      "txHash": "0x289e9893b21a6323c32c3d9f36e2050a051678ea81ab2fe7c858d78ffc5f5c29",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9827_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:381"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9827_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9827_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9d1f3ff7d203565fb53c7f6ba271c62bf63c78dac9ddb70bc4d2faffd9878bd3": {
      "address": "0xCFc5Ec40757aa3830E5feee9d6e994095d4C60eD",
      "txHash": "0x18d3911b22503a14846a8408750235068b540337beb28d2ef7c01da90115dac5",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9825_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:381"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9825_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9825_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ff95a2bab64e7f4ae7cedb37c0b5813020e4f03a65da8e789ad34d2bd10a4339": {
      "address": "0xdB95ff0ba0795F788058f16aFB7D7201640d3863",
      "txHash": "0x0d68f11be5eeda9335ee4966c8deff578e2bc6a781478ebe10cf2980e2c8f4bb",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8594_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9839_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8594_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9839_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8340_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8347_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8594_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8347_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9839_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9e18e76cda1439548f97e8a93f218e00dea214c82b1210065ec577cde112867d": {
      "address": "0x5327f59fF8fC146c9F254204D176164988DC047B",
      "txHash": "0xf5883ae32ff73d82eaa31153e8ad0e17054538a5e0ea4c35fed330140e32eb3c",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8598_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9853_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:391"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8598_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9853_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8340_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8347_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8598_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8347_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9853_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "86f58aab68a94d636bb16cbfc4840db77576f522276ba0a8deac9df24bd39e9f": {
      "address": "0x1c5BfA8D4a697f493556c5A95db68c9361eB15ab",
      "txHash": "0x66184b0562968dddef6ac5e9205d1b4f15e4e94e3f415473cd5fa89f7c9c467f",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8598_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9862_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:393"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8598_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9862_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8340_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8347_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8340_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8598_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8347_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9862_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6ab78381927b359f64e5170dc14b020d8d4427e581c09b8e3d469940b453596d": {
      "address": "0x4DF1004425f7251b574c5158e74D2D313AA0E36f",
      "txHash": "0xc63b54fd53538a1cb3f00be5ee474754e8ee477763ad9f5a615a8d5de7398a0f",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)6153_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:379"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4618_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)4876_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)6153_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4618_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)4625_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4618_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)4876_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)4625_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)6153_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
