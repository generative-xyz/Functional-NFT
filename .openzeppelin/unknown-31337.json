{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "txHash": "0xac57b9bf03cc22818eb1928e5d16d367b8d500b66e2052df0bb347c67da1eabb"
  },
  "proxies": [
    {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0x0977e3455191b302226d635b88a776ee2cc5abfb1935a2c3cede88771588f929",
      "kind": "transparent"
    },
    {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0x0402b0e4086cc492038e06ef9a6b83528ae5e0d481929dae3b44cadaf563b836",
      "kind": "transparent"
    },
    {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0xe66c9cf653a98370b984c4f8d894680c59dfc300ae6a34ae010e335793f27282",
      "kind": "transparent"
    }
  ],
  "impls": {
    "ac3961ba1d060cde1ae1d3514816bf1c0916a4b0ebee3b7183f94d7b6c39ecf3": {
      "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
      "txHash": "0x8485076908f862f696b245b2b5201a8f8fafaf5cacc9fc0356dd61b3f83a8c45",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9836_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "cf6eaabd9871f41c89ea9d37a97980a35faba4eaa80f13c7dd839891d3e2c533": {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0xffeac51375cf83d724e6cdd9997c500eb1c92718bbcf66602c5d16eb225b48b7",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:383"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9836_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9836_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4567af6ae2e25dc713d141d173de30855efaca461489286a57e7fd2fb4e1d739": {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0xd44b9b5f6b5e444d4e96f4c7798cfa9d91b0dfff1de371c6d474001e5fccd80d",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:48"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:54"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:59"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:62"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9837_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:382"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8584_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9837_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8330_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8337_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8330_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8584_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8337_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9837_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "aab68529cff8fef6a22a82467656791ebd410c0aa86863aa5b1824b927c555fe": {
      "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      "txHash": "0xbdf761257aa0f856dcd3d0c04beb11c5fb9d632a41a043140ac97ebd036f7b94",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4125_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3151_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "552",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_nextTokenId",
            "offset": 0,
            "slot": "601",
            "type": "t_struct(Counter)3151_storage",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:19"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "602",
            "type": "t_address",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:22"
          },
          {
            "label": "_boilerplateAddr",
            "offset": 0,
            "slot": "603",
            "type": "t_address",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:24"
          },
          {
            "label": "_boilerplateId",
            "offset": 0,
            "slot": "604",
            "type": "t_uint256",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:26"
          },
          {
            "label": "_paramsValues",
            "offset": 0,
            "slot": "605",
            "type": "t_mapping(t_uint256,t_struct(ParamsOfProject)4526_storage)",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:28"
          },
          {
            "label": "_traits",
            "offset": 0,
            "slot": "606",
            "type": "t_struct(Traits)4661_storage",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:30"
          },
          {
            "label": "_customUri",
            "offset": 0,
            "slot": "607",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:33"
          },
          {
            "label": "_creators",
            "offset": 0,
            "slot": "608",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:35"
          },
          {
            "label": "_nameColl",
            "offset": 0,
            "slot": "609",
            "type": "t_string_storage",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:37"
          },
          {
            "label": "_symbolColl",
            "offset": 0,
            "slot": "610",
            "type": "t_string_storage",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:38"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "611",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5496_storage)",
            "contract": "GenerativeNFT",
            "src": "contracts/nft/GenerativeNFT.sol:235"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)4519_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(Trait)4656_storage)dyn_storage": {
            "label": "struct TraitInfo.Trait[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4125_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ParamsOfProject)4526_storage)": {
            "label": "mapping(uint256 => struct BoilerplateParam.ParamsOfProject)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)5496_storage)": {
            "label": "mapping(uint256 => struct GenerativeNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4125_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3824_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3151_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)4519_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)4526_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)4519_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)5496_storage": {
            "label": "struct GenerativeNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3824_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Trait)4656_storage": {
            "label": "struct TraitInfo.Trait",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_valueStr",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Traits)4661_storage": {
            "label": "struct TraitInfo.Traits",
            "members": [
              {
                "label": "_traits",
                "type": "t_array(t_struct(Trait)4656_storage)dyn_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e45d693c3e722a2d4b4d4312e4be936312cd62bf7f3717566f231c5a8e428cb0": {
      "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
      "txHash": "0xde0dd0e3a1f030fc657d6c6dc77a5b1980df4a55dc6576f56e82a7b892af99bf",
      "layout": {
        "solcVersion": "0.8.12",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
          },
          {
            "label": "_roleMembers",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlEnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "201",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "202",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:465"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:175"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "301",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:38"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "351",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "352",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "401",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "label": "_tokenIdTracker",
            "offset": 0,
            "slot": "451",
            "type": "t_struct(Counter)3177_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:51"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "452",
            "type": "t_string_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:53"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "453",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ERC721PresetMinterPauserAutoIdUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/presets/ERC721PresetMinterPauserAutoIdUpgradeable.sol:163"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "501",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "502",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "_admin",
            "offset": 0,
            "slot": "551",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:26"
          },
          {
            "label": "_paramsAddress",
            "offset": 0,
            "slot": "552",
            "type": "t_address",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:28"
          },
          {
            "label": "_nextProjectId",
            "offset": 0,
            "slot": "553",
            "type": "t_struct(Counter)3177_storage",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:31"
          },
          {
            "label": "_projects",
            "offset": 0,
            "slot": "554",
            "type": "t_mapping(t_uint256,t_struct(ProjectInfo)8621_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:50"
          },
          {
            "label": "_seedOwners",
            "offset": 0,
            "slot": "555",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:56"
          },
          {
            "label": "_approvalForAllSeeds",
            "offset": 0,
            "slot": "556",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:61"
          },
          {
            "label": "_seedToTokens",
            "offset": 0,
            "slot": "557",
            "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:64"
          },
          {
            "label": "royalties",
            "offset": 0,
            "slot": "558",
            "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9870_storage)",
            "contract": "GenerativeBoilerplateNFT",
            "src": "contracts/nft/GenerativeBoilerplateNFT.sol:373"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ParamTemplate)8345_storage)dyn_storage": {
            "label": "struct BoilerplateParam.ParamTemplate[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_address))": {
            "label": "mapping(bytes32 => mapping(uint256 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(bytes32 => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)4151_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(ProjectInfo)8621_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.ProjectInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(RoyaltyInfo)9870_storage)": {
            "label": "mapping(uint256 => struct GenerativeBoilerplateNFT.RoyaltyInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4151_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3850_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Counter)3177_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ParamTemplate)8345_storage": {
            "label": "struct BoilerplateParam.ParamTemplate",
            "members": [
              {
                "label": "_typeValue",
                "type": "t_uint8",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_max",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_min",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_decimal",
                "type": "t_uint8",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_availableValues",
                "type": "t_array(t_string_storage)dyn_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_editable",
                "type": "t_bool",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_struct(ParamsOfProject)8352_storage": {
            "label": "struct BoilerplateParam.ParamsOfProject",
            "members": [
              {
                "label": "_seed",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_params",
                "type": "t_array(t_struct(ParamTemplate)8345_storage)dyn_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(ProjectInfo)8621_storage": {
            "label": "struct GenerativeBoilerplateNFT.ProjectInfo",
            "members": [
              {
                "label": "_fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_feeToken",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_mintMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_mintTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_script",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_scriptType",
                "type": "t_uint32",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "_creator",
                "type": "t_address",
                "offset": 4,
                "slot": "5"
              },
              {
                "label": "_customUri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "_projectName",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "_clientSeed",
                "type": "t_bool",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "_paramsTemplate",
                "type": "t_struct(ParamsOfProject)8352_storage",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "_minterNFTInfo",
                "type": "t_address",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "_mintNotOwnerProjectMaxSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "_mintNotOnwerProjectTotalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "13"
              }
            ],
            "numberOfBytes": "448"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoyaltyInfo)9870_storage": {
            "label": "struct GenerativeBoilerplateNFT.RoyaltyInfo",
            "members": [
              {
                "label": "recipient",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint24",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "isValue",
                "type": "t_bool",
                "offset": 23,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Set)3850_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint24": {
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
